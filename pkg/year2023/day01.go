// Code generated by aocgen; DO NOT EDIT.
package year2023

import (
	"strconv"
)

type Day01 struct{}

func (p Day01) PartA(lines []string) any {
	sum := 0

	for _, line := range lines {
		fDigit := findFirstDigit(line)
		lDigit := findLastDigit(line)

		both := string(fDigit) + string(lDigit)
		num, _ := strconv.Atoi(both)
		sum += num
	}

	return sum

}

func (p Day01) PartB(lines []string) any {
	sum := 0

	numbers := []string{"one", "two", "three", "four", "five", "six", "seven", "eight", "nine"}

	for _, line := range lines {
		numStr := ""
		for i, ch := range line {
			if ch >= '0' && ch <= '9' {
				numStr += string(ch)
				continue
			}

			for j, number := range numbers {
				if ch == rune(number[0]) {
					if len(number)+i <= len(line) && number == line[i:len(number)+i] {
						numStr += strconv.Itoa(j + 1)
						break
					}

				}
			}
		}

		if len(numStr) > 0 {
			num, _ := strconv.Atoi(string(numStr[0]) + string(numStr[len(numStr)-1]))
			sum += num
		}
	}

	return sum
}

func findFirstDigit(s string) rune {
	for _, ch := range s {
		if ch >= '0' && ch <= '9' {
			return rune(ch)
		}
	}
	return '0'
}

func findLastDigit(s string) rune {
	for i := len(s) - 1; i >= 0; i-- {
		ch := s[i]
		if ch >= '0' && ch <= '9' {
			return rune(ch)
		}
	}
	return '0'
}
